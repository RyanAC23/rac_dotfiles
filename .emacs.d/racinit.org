#+STARTUP: overview
#+PROPERTY: header-args :comments yes :results silent

* Behavior
** Common Lisp
Enable common lisp syntax
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC

** Splash Screen
Disable the default splash screen.
#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
#+END_SRC

** y/n instead of 'yes/no'
Be able to type 'y' instead of 'yes'
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC

** which-key mode
A nice mode that shows a list of key bindings that follow from inputs you've already entered.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :ensure t
    :diminish which-key-mode
    :config (which-key-mode))
#+END_SRC

** No Trailing Whitespace
Delete trailing whitespace when saving
#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Word Wrap
enable word wrap mode globally
#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
#+END_SRC

** Cleaner Directories
reroute backups and control history

#+BEGIN_SRC emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
	  (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t          ; backup of a file the first time it is saved.
	backup-by-copying t          ; don't clobber symlinks
	version-control t            ; version numbers for backup files
	delete-old-versions t        ; delete excess backup files silently
	delete-by-moving-to-trash t
	kept-old-versions 6          ; oldest versions to keep when a new numbered backup is made (default: 2)
	kept-new-versions 9          ; newest versions to keep when a new numbered backup is made (default: 2)
	auto-save-default t          ; auto-save every buffer that visits a file
	auto-save-timeout 20         ; number of seconds idle time before auto-save (default: 30)
	auto-save-interval 200       ; number of keystrokes between auto-saves (default: 300)
	)
#+END_SRC

** Server Mode
Start in server mode to open files in the server instance with the bash command
#+BEGIN_SRC emacs-lisp
  ;; >>$ 'emacsclient [file]'
  (server-start)
#+END_SRC

** Line Numbers
Enable line numbers by default.
#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
#+END_SRC

** Enable parenthesis matching mode
https://melpa.org/#/mic-paren
#+BEGIN_SRC emacs-lisp
  (use-package mic-paren
      :ensure t
      :config
      ;;(paren-activate)
      (add-hook 'c-mode-common-hook 'paren-activate)
      (add-hook 'python-mode-hook   'paren-activate)
      (add-hook 'org-mode-hook      'paren-activate)
  )
#+END_SRC

** Navigation
 #+BEGIN_SRC emacs-lisp
 ;; move between windows with shift+[arrow]
     (windmove-default-keybindings)
 #+END_SRC
** Quick Reload init.el
 Don't rebind keys for opening init.el. Instead, use [[https://emacs.stackexchange.com/questions/35170/is-there-a-key-binding-to-open-the-configuration-file-of-emacs][bookmarks.]]
 #+BEGIN_SRC emacs-lisp
 (defun reload-init-file ()
   (interactive)
   (load-file user-init-file))

 (global-set-key (kbd "C-c r") 'reload-init-file)

 #+END_SRC

** Insert timestamp
#+BEGIN_SRC emacs-lisp
;; ====================
;; insert date and time

(defvar current-date-time-format "%a %b %d %H:%M:%S %Z %Y"
  "Format of date to insert with `insert-current-date-time' func
See help of `format-time-string' for possible replacements")

(defvar current-time-format "%a %H:%M:%S"
  "Format of date to insert with `insert-current-time' func.
Note the weekly scope of the command's precision.")

(defun insert-current-date-time ()
  "insert the current date and time into current buffer.
Uses `current-date-time-format' for the formatting the date/time."
       (interactive)
       (insert "==========\n")
;       (insert (let () (comment-start)))
       (insert (format-time-string current-date-time-format (current-time)))
       (insert "\n")
       )

(defun insert-current-time ()
  "insert the current time (1-week scope) into the current buffer."
       (interactive)
       (insert "- ")
       (insert (format-time-string current-time-format (current-time)))
       (insert " ")
       )

(global-set-key "\C-x\C-d" 'insert-current-date-time)
(global-set-key "\C-x\C-t" 'insert-current-time)
#+END_SRC

** UTF-8 Encoding
#+BEGIN_SRC emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
#+END_SRC

* Theme and Appearance
[[https://emacs.stackexchange.com/questions/7151/is-there-a-way-to-detect-that-emacs-is-running-in-a-terminal][Terminal sessions]] can have problems with color themes, so only load your custom color profile if running in a GUI. I do this by running emacs with two different aliases, one for a full GUI session and another for a terminal, with its own minimal init.el loaded. This is usually only for git commits and other quick edits.

** Free up space by killing the toolbar
#+BEGIN_SRC emacs-lisp
(tool-bar-mode -1)
#+END_SRC

** Display clock and system load average
#+BEGIN_SRC emacs-lisp
(setq display-time-24hr-format t)
(display-time-mode 1)
#+END_SRC

** load a default theme.
https://emacsfodder.github.io/emacs-theme-editor/
#+BEGIN_SRC emacs-lisp
(add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
(if (display-graphic-p)
    (load-theme 'neptune t))
#+END_SRC

** Transparency
Set transparency, and map transparency toggle to C-c t from https://www.emacswiki.org/emacs/TransparentEmacs

#+BEGIN_SRC emacs-lisp
(defun toggle-transparency ()
   (interactive)
   (let ((alpha (frame-parameter nil 'alpha)))
     (set-frame-parameter
      nil 'alpha
      (if (eql (cond ((numberp alpha) alpha)
                     ((numberp (cdr alpha)) (cdr alpha))
                     ;; Also handle undocumented (<active> <inactive>) form.
                     ((numberp (cadr alpha)) (cadr alpha)))
               100)
          '(95 . 50) '(100 . 100)))))
(global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC

** Modeline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
  (spaceline-spacemacs-theme))
#+END_SRC
** diminish - hide minor modes from line
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'ivy-mode)
    (diminish 'page-break-lines-mode)
    (diminish 'undo-tree-mode)
    (diminish 'org-src-mode)
    (diminish 'eldoc-mode)
    (diminish 'projectile-mode))
#+END_SRC

* SSH / TRAMP
** Tramp
#+BEGIN_SRC emacs-lisp
(setq tramp-verbose 10)
#+END_SRC
* Searching
#+BEGIN_SRC emacs-lisp
;; Searching -----------------------------------------------------------

;; counsel is a requirement for swiper
(use-package counsel
  :ensure t
  :bind(("M-y" . counsel-yank-pop)
	:map ivy-minibuffer-map
	("M-y" . ivy-next-line)))

;; swiper is an improved search with intelligent pattern matching.
;; this makes ido-mode unecessary. Many of these rebindings are
;; probably unecessary as well.
(use-package swiper
  :ensure try
  :bind (("C-s" . swiper)
	 ("C-r" . swiper)
	 ("C-c C-r" . ivy-resume)
	 ("M-x" . counsel-M-x)
	 ("C-x C-f" . counsel-find-file))
  :config
  (progn
    (ivy-mode 1)
    (setq ivy-use-virtual-buffers t)
    (setq ivy-display-style 'fancy)
    (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

* TODO Autocompletion

** ISP
#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init
    (setq lsp-keymap-prefix "C-c l")
    :config
    (lsp-enable-which-key-integration t))
#+END_SRC

** Autocompletion
#+BEGIN_SRC emacs-lisp

  ;; Autocompletion ----------------------------------------------------------
  ;; We'll try company-mode for now. The old standard autocomplete was the
  ;; smartly named auto-complete, but only company is being actively developed.
   (use-package company
     :ensure t
     :init
     (add-hook 'emacs-lisp-mode-hook 'company-mode)
     (add-hook 'org-mode-hook 'company-mode)
     (add-hook 'c++-mode-hook 'company-mode)
     (add-hook 'c-mode-hook 'company-mode))

  ;; C/C++ intellisense
  ;; may need clang compiler installed for this to work
  ;; (use-package company-irony
  ;;  :ensure t
  ;;  :config
  ;;  (require 'company)
  ;;  (add-to-list 'company-backends 'company-irony))

  ;; (use-package irony
  ;;  :ensure t
  ;;  :config
  ;;  (add-hook 'c++-mode-hook 'irony-mode)
  ;;  (add-hook 'c-mode-hook 'irony-mode)
  ;;  (add-hook 'irony-mode-hook 'irony-cdb-autosetup-compile-options))


#+END_SRC

* iBuffer
#+BEGIN_SRC emacs-lisp
  ;; Navigation -------------------------------------------------------------
  (defalias 'list-buffers 'ibuffer)
  ;; Don't show filter groups if there are no filters in the group
  (setq ibuffer-show-empty-filter-groups nil)
  (setq ibuffer-sorting-mode major-mode)
  ;; Don't ask for confirmation to delete unmodified buffers
  (setq ibuffer-expert t)

  ;; categorize buffers by groups:
  (setq ibuffer-saved-filter-groups
	(quote (("default"
		 ("python" (mode . python-mode))
		 ("c/c++" (or
			   (mode . c-mode)
			   (mode . c++-mode)))
		 ("org"
		           (mode . org-mode))
		 ("web"
			   (or
			   (mode . web-mode)
			   (mode . css-mode)))
		 ("emacs" (or
			   (name . "^\\*scratch\\*$")
			   (name . "^\\*Messages\\*$")))))))

  (add-hook 'ibuffer-mode-hook
	    (lambda ()
	      (ibuffer-switch-to-saved-filter-groups "default")))
#+END_SRC
* Dashboard / Homescreen
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :init
    (projectile-mode 1)
    :config
    (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map)
    )

  (use-package all-the-icons
    :ensure t)
  ;; add install fonts if not present feature
  (defun install-icon-fonts-checker (dir)
    (if ((file-exists-p dir) nil)
	(message "Not looking good, champ.")
      (message "Looks like it's there.")))
  ;; install if not present
  (unless (file-exists-p "~/.local/share/fonts/all-the-icons.ttf")
    (all-the-icons-install-fonts))

 (use-package dashboard
   :ensure t
   :config
   (dashboard-setup-startup-hook)
   (setq dashboard-startup-banner "~/.emacs.d/banner/banner.gif")
   (setq dashboard-items '((recents . 15)
			    (projects . 5)
			    (bookmarks . 5)
			    (agenda . 5)
			    (registers . 5)))
   ;; centering looks awful with multiple frames.
   ;;(setq dashboard-center-content t)
   (setq dashboard-set-file-icons t)
   (setq dashboard-set-heading-icons t)
   (setq dashboard-footer-messages nil)
   (load-file "~/.emacs.d/dashboard_quotes.el")
   (setq dashboard-banner-logo-title (nth (random (length dashboard-quote-list)) dashboard-quote-list)))
#+END_SRC

* Org Mode
#+BEGIN_SRC emacs-lisp
;; Org-mode ------------------------------------------------------------
(use-package org-bullets
  :ensure t
  :config
  (add-hook 'org-mode-hook (lambda () (org-bullets-mode 1))))

;; reveal.js presentations
(use-package ox-reveal
  :ensure ox-reveal)
;; We need to tell ox-reveal where to find the js file.
;; https://github.com/yjwen/org-reveal#set-the-location-of-revealjs
(setq org-reveal-root "http://cdn.jsdelivr.net/npm/reveal.js")
(setq org-reveal-mathjax t)
;; enable syntax highlighting
(use-package htmlize
  :ensure t)

;; Add markdown export support
(require 'ox-md)
#+END_SRC
* Org Links Mode

For some reason, org capture links can't be defined in this file. If present here, they aren't loaded. I've moved that code chunk to [[file:./init.el][~init.el~]] instead.
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c")
		  'org-capture)

  (defadvice org-capture-finalize
      (after delete-capture-frame activate)
    "Advise capture-finalize to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))

  (defadvice org-capture-destroy
      (after delete-capture-frame activate)
    "Advise capture-destroy to close the frame"
    (if (equal "capture" (frame-parameter nil 'name))
	(delete-frame)))

  (use-package noflet
    :ensure t )

  (defun make-capture-frame ()
    "Create a new frame and run org-capture."
    (interactive)
    (make-frame '((name . "capture")))
    (select-frame-by-name "capture")
    (delete-other-windows)
    (noflet ((switch-to-buffer-other-window (buf) (switch-to-buffer buf)))
      (org-capture)))
#+END_SRC

* TODO C / C++
** Flycheck
#+BEGIN_SRC emacs-lisp

  (use-package flycheck
    :ensure t
    :config
      (add-hook 'c-mode-hook 'flycheck-mode)
      (add-hook 'c-mode-hook '(lambda () (setq flycheck-gcc-language-standard "gnu99")))
      (add-hook 'c++-mode-hook 'flycheck-mode)
      ;;(add-hook 'python-mode-hook 'flycheck-mode)
      )

#+END_SRC

** Yasnippet
Yasnippet gives you quick completion of common code snippets, such as loops and preprocessor instructions.

#+BEGIN_SRC emacs-lisp
  (use-package yasnippet
    :ensure t
    :config
    (add-hook 'c-mode-hook 'yas-minor-mode)
    (add-hook 'c++-mode-hook 'yas-minor-mode)
    ;;(add-hook 'python-mode-hook 'yas-minor-mode)
  )
  (use-package yasnippet-snippets
    :ensure t)

#+END_SRC
* TODO Python
** Blacken Hook
Automatically run blacken on any saved python buffer. The time saved is worth any disagreements I might have about formatting.

#+BEGIN_SRC emacs-lisp
    (use-package blacken
	:ensure t
	:config
	(add-hook 'python-mode-hook 'blacken-mode)
    )
#+END_SRC

** Selective Display
Uses the function keys to hide indentation.

#+BEGIN_SRC emacs-lisp
    (defun indent-show-all ()
      (interactive)
      (set-selective-display nil)
      (condition-case nil (hs-show-all) (error nil))
      (show-all))
    (defun python-remap-fs ()
      (global-set-key [f1] 'indent-show-all)
      (global-set-key [f2] (lambda () (interactive) (set-selective-display
						   standard-indent)))
      (global-set-key [f3] (lambda () (interactive) (set-selective-display
						   (* 2 standard-indent))))
      (global-set-key [f4] (lambda () (interactive) (set-selective-display
						   (* 3 standard-indent))))
      (global-set-key [f5] (lambda () (interactive) (set-selective-display
						   (* 4 standard-indent))))
      (global-set-key [f6] (lambda () (interactive) (set-selective-display
						   (* 5 standard-indent))))
      (global-set-key [f7] (lambda () (interactive) (set-selective-display
						   nil)))
    )

  (add-hook 'python-mode-hook 'python-remap-fs)

#+END_SRC

** TODO IDE
Nothing stuck here yet....

* TODO LaTeX
** Auctex / latexmk
#+BEGIN_SRC emacs-lisp
 (use-package tex
    :ensure auctex
)
(use-package auctex-latexmk
    :ensure t
)
(setq TeX-auto-save t)
(setq TeX-parse-self t)
(setq-default TeX-master nil)
(add-hook 'LaTeX-mode-hook 'visual-line-mode)
(add-hook 'LaTeX-mode-hook 'flyspell-mode)
(add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
(add-hook 'LaTeX-mode-hook 'turn-on-reftex)
(setq reftex-plug-into-AUCTeX t)
#+END_SRC

* Web Development
#+BEGIN_SRC emacs-lisp
  (use-package web-mode
    :ensure t
    :config
    (add-to-list 'auto-mode-alist '("\\.html?\\'" . web-mode))
    (setq web-mode-engines-alist
	  '(("django" . "\\.html\\'")))
    (setq web-mode-ac-sources-alist
	  '(("css" . (ac-source-css-property))
	    ("html" . (ac-source-words-in-buffer ac-source-abbrev))))
    (setq web-mode-enable-auto-closing t)
    (setq web-mode-enable-auto-quoting t)
    (setq web-mode-enable-current-column-highlight t)
    (setq web-mode-enable-current-element-highlight t))

  (use-package emmet-mode
    :ensure t
    :config
    (add-hook 'sgml-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'web-mode-hook 'emmet-mode) ;; Auto-start on any markup modes
    (add-hook 'css-mode-hook 'emmet-mode) ;; enable Emmet's css abbreviation.
  )
#+END_SRC
* Website
** Main Website Export
C-c + b
#+BEGIN_SRC emacs-lisp
  (require 'ox-publish)
  (setq org-publish-project-alist
	'(

	  ;; ... add all the components here (see below)...
	  ("RyanAC23-website" :components ("website-notes" "website-static"))

	  ("website-notes"
	   :base-directory "~/Dropbox/website/org/"
	   :base-extension "org"
	   :publishing-directory "~/Dropbox/website/public_html/"
	   :recursive t
	   :publishing-function org-html-publish-to-html
	   :headline-levels 4
	   :auto-preamble t
	   )

	  ("website-static"
	   :base-directory "~/Dropbox/website/org/"
	   :base-extension "css\\|js\\|png\\|jpg\\|gif\\|pdf\\|mp3\\|ogg\\|swf\\|html"
	   :publishing-directory "~/Dropbox/website/public_html/"
	   :recursive t
	   :publishing-function org-publish-attachment
	   )


	  ))
#+END_SRC
** Rebuild Sites
 #+BEGIN_SRC emacs-lisp
 (global-set-key (kbd "C-c b") 'org-publish-project)
 #+END_SRC

** Custom Commands
Export JS directly from a code block [[https://emacs.stackexchange.com/questions/28301/export-javascript-source-block-to-script-tag-in-html-when-exporting-org-file-to][by evaluating]]:
#+BEGIN_SRC emacs-lisp
(add-to-list 'org-src-lang-modes '("inline-js" . javascript))
(defvar org-babel-default-header-args:inline-js
  '((:results . "html")
    (:exports . "results")))
(defun org-babel-execute:inline-js (body _params)
  (format "<script type=\"text/javascript\">\n%s\n</script>" body))
#+END_SRC
* RSS - Elfeed
#+BEGIN_SRC emacs-lisp
  (use-package elfeed
    :ensure t
    )
  (global-set-key (kbd "C-x w") 'elfeed)
  (setq-default elfeed-search-filter "@2-months-ago")
  (add-hook 'emacs-startup-hook (lambda () (run-at-time 5 5 'elfeed-update)))


(let ((elfeed-urls "~/Dropbox/emacs/rac_elfeeds.el"))
 (when (file-exists-p elfeed-urls)
   (load-file elfeed-urls))
)
#+END_SRC

* Test Space
For Melpa packages I haven't committed myself to.
