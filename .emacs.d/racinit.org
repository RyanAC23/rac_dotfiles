#+TITLE: Ryan's Emacs Config
#+STARTUP: overview
#+PROPERTY: header-args:emacs-lisp :lexical t :tangle ./racinit.el :results silen
#+EXCLUDE_TAGS: noexport

* Emacs Config
This is my main config file for Emacs. It sets up all of the packages and hooks I want to use, despite being an Org mode file.

The property header in this file is where the magic happens. [[https://orgmode.org/worg/org-contrib/babel/][Org-Babel]] is configured to automatically extract, or "tangle", every cell in this notebook with the header "Emacs-Lisp". It then outputs them in a new file, specified in the property header. I include that file in my default `init.el`, and otherwise I do not edit that file. With this workflow, all editing of my Emacs config is done within this file, and I can quickly jump between collapsible headers and organize code on the fly.

** Style Guidelines
- `BEGIN_SRC` lines should have a space above them, but not below.
- `END_SRC` lines should have a space below them, but not above.
- If the purpose of a function is something that might apply to a different language, put it in its own section. For instance, I do not only want to autolint Python files, so all linting procedures should be in the same section.
- Minimize dependencies. Delete them if you don't use them.

* Global Variables
** Fonts
Palatino seems to need a slightly larger font to be comfortable.

#+BEGIN_SRC emacs-lisp

  (defvar rac/default-bigger-font-size 135)
  (defvar rac/fixed-pitch-bigger-font-size 130)
  (defvar rac/default-font-size 120)
  (defvar rac/fixed-pitch-font-size 120)
  (defvar rac/default-variable-font-size 120)

	;; (set-face-attribute 'default nil :font "Palatino" :height
	;;    		  rac/default-bigger-font-size)
	;; (set-face-attribute 'variable-pitch nil :font "Cantarell" :height
	;; 		    rac/default-variable-font-size :weight 'regular)
	;; (set-face-attribute 'fixed-pitch nil :font "Palatino" :height
	;; 		    rac/fixed-pitch-bigger-font-size)

	(set-face-attribute 'default nil :font "Fira Code Retina" :height
			    rac/default-font-size)
	(set-face-attribute 'fixed-pitch nil :font "Fira Code Retina" :height
			      rac/default-font-size)
	(set-face-attribute 'variable-pitch nil :font "Cantarell" :height
			      rac/default-variable-font-size :weight 'regular)
#+END_SRC
* RAC utils
These are utility and helper functions I've written to customize my experience. I have collected them here so that they will be loaded in time to be used elsewhere; in particular I was having issues with Dashboard selecting my quotes randomizer (a vanity I was not willing to give up).

`rac/load-if-exists` was moved to `init.el` because that's where *this* file is loaded from.

#+BEGIN_SRC emacs-lisp
  (rac/load-if-exists "~/.emacs.d/dashboard_quotes.el")
                                          ; provides rac/dashboard-quotes-list
  (defun rac/random-quote ()
    "Pick a random quote from `dashboard_quotes.el`."
    (if (and
         (boundp 'rac/dashboard-quotes-list)
         (> (length rac/dashboard-quotes-list) 0))
        (nth (random (length rac/dashboard-quotes-list)) rac/dashboard-quotes-list)
      "ERROR: rac/dashboard-quotes-list not bound or 0 length."))

  (defvar rac/bytes-per-KiB 1024
    "Number of bytes in a kibibyte (KiB).")

  (defvar rac/bytes-per-MiB (* rac/bytes-per-KiB 1024)
    "Number of bytes in a mebibyte (MiB).")

#+END_SRC

* Startup Performance
  The default garbage collection threshold is 800 kilobytes. This means a ton of garbage collections will occur, slowing down startup. I raise the default threshold for startup and lower it again at the bottom of this file.

#+BEGIN_SRC emacs-lisp

      (setq gc-cons-threshold (* 100 rac/bytes-per-MiB))
      ;"GC threshold during startup: 100 MiB."

      (defun rac/run-startup-diagnostics ()
        "A short profile of emacs startup."
        (add-hook 'emacs-startup-hook
                  (lambda ()
                    (message "*** Emacs loaded in %s with %d garbage collections."
                             (format "%.2f seconds"
                                     (float-time
                                      (time-subtract after-init-time before-init-time)))
                             gcs-done))))
  (setq use-package-verbose t)
  (rac/run-startup-diagnostics)
#+END_SRC
* Behavior - Basic
** Common Lisp
Enable common lisp syntax.
#+BEGIN_SRC emacs-lisp
  (require 'cl-lib)
#+END_SRC
** UTF-8 Encoding

#+BEGIN_SRC emacs-lisp
  (prefer-coding-system 'utf-8)
  (set-default-coding-systems 'utf-8)
#+END_SRC
** y/n instead of 'yes/no'
Be able to type 'y' instead of 'yes'.
#+BEGIN_SRC emacs-lisp
  (fset 'yes-or-no-p 'y-or-n-p)
#+END_SRC
** Quick Reload init.el
 Don't rebind keys for opening init.el. Instead, use [[https://emacs.stackexchange.com/questions/35170/is-there-a-key-binding-to-open-the-configuration-file-of-emacs][bookmarks.]]
 #+BEGIN_SRC emacs-lisp
   (defun reload-init-file ()
     (interactive)
     (load-file user-init-file))

   (global-set-key (kbd "C-c r") 'reload-init-file)
 #+END_SRC
** Navigation
Move between windows with shift+[arrow]. See [[Org Mode]] for a custom hook that disables this minor mode locally and enables shift for TODO flags.

#+BEGIN_SRC emacs-lisp
   (windmove-default-keybindings)
 #+END_SRC

** Line Numbers
Enable the display of line numbers by default.

#+BEGIN_SRC emacs-lisp
  (when (version<= "26.0.50" emacs-version )
    (global-display-line-numbers-mode))
#+END_SRC

** No Trailing Whitespace
Delete trailing whitespace when saving.

#+BEGIN_SRC emacs-lisp
  (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+END_SRC

** Word Wrap
enable word wrap mode globally

#+BEGIN_SRC emacs-lisp
  (global-visual-line-mode)
#+END_SRC

** Key Rebinds
By default, `C-n` is bound to `next-line`, which goes immediately to the line below. This behavior includes wrapped lines that do not actually end in a carriage return. Intuitively this behavior makes sense for the arrow keys, which are almost always on present day, present time keyboards, so there's no need for `C-n` to reproduce the behavior. When defining quick macros, I sometimes want to go to the next logical line, which is unbound in emacs by default.

#+BEGIN_SRC emacs-lisp
(require 'bind-key)
(bind-key* "C-n" 'next-logical-line)
#+END_SRC

** TODO Cleaner Directories
reroute backups and control history

#+BEGIN_SRC emacs-lisp
  (defvar --backup-directory (concat user-emacs-directory "backups"))
  (if (not (file-exists-p --backup-directory))
      (make-directory --backup-directory t))
  (setq backup-directory-alist `(("." . ,--backup-directory)))
  (setq make-backup-files t          ; backup of a file the first time it is saved.
        backup-by-copying t          ; don't clobber symlinks
        version-control t            ; version numbers for backup files
        delete-old-versions t        ; delete excess backup files silently
        delete-by-moving-to-trash t
        kept-old-versions 2          ; oldest versions to keep when a new numbered backup is made (default: 2)
        kept-new-versions 2          ; newest versions to keep when a new numbered backup is made (default: 2)
        auto-save-default nil          ; auto-save every buffer that visits a file
        auto-save-timeout 20         ; number of seconds idle time before auto-save (default: 30)
        auto-save-interval 200)       ; number of keystrokes between auto-saves (default: 300)
#+END_SRC

** Server Mode
Start in server mode to open files in the server instance with the bash command

#+BEGIN_SRC emacs-lisp
  (use-package server
  :ensure nil
  :config
  (unless (server-running-p)
      (server-start)
      (toggle-frame-maximized)))
#+END_SRC

** Insert timestamp
Insert the date and time.
#+BEGIN_SRC emacs-lisp
  (defvar current-date-format "%A %d %B %Y"
    "Format of date to insert with `insert-current-date' func
    See help of `format-time-string' for possible replacements")

  (defvar current-date-time-format "%a %d %B %Y %H:%M:%S %Z"
    "Format of date to insert with `insert-current-date-time' func
    See help of `format-time-string' for possible replacements")

  (defvar current-time-format "%a %H:%M:%S"
    "Format of date to insert with `insert-current-time' func.
    Note the weekly scope of the command's precision.")

  (defun insert-current-date ()
    "insert the current date and time into current buffer.
  Uses `current-date-time-format' for the formatting the date/time."
    (interactive)
    (cond
     ((equal major-mode 'markdown-mode)
      (insert "# "))
     ((equal major-mode 'org-mode)
      (insert "* "))
     (t
      (insert "# ---------\n# ")))
    (insert (format-time-string current-date-format))
    (insert "\n"))

  (defun insert-current-date-time ()
    "insert the current date and time into current buffer.
    Uses `current-date-time-format' for the formatting the date/time."
    (interactive)
    (insert "========================================\n")
    (insert (format-time-string current-date-time-format (current-time)))
    (insert "\n"))

  (defun insert-current-time ()
    "insert the current time (1-week scope) into the current buffer."
    (interactive)
    (insert "- ")
    (insert (format-time-string current-time-format (current-time)))
    (insert " "))

  (global-set-key "\C-x\C-d" 'insert-current-date)
  (global-set-key "\C-x\C-t" 'insert-current-time)
#+END_SRC

* Behavior - Packages
** Packages
Always add ~:ensure t~ to packages with ~use-package~. This causes packages to be installed automatically if they are not present on your system (this is useful when jumping back and forth between a few different machines).

#+BEGIN_SRC emacs-lisp
  ;(require 'use-package)
  (require 'use-package-ensure)
  (setq use-package-always-ensure t)
#+END_SRC

** Try

Download and give a melpa package a shot without adding it to init.el.

#+BEGIN_SRC emacs-lisp
  (use-package try
    :defer t)
#+END_SRC

** which-key mode
A nice mode that shows a list of key bindings that follow from inputs you've already entered.

#+BEGIN_SRC emacs-lisp
  (use-package which-key
    :defer 0
    :diminish which-key-mode
    :config
    (which-key-mode)
    (setq which-key-idle-delay 1))
#+END_SRC

** Enable parenthesis matching mode
https://melpa.org/#/mic-paren

#+BEGIN_SRC emacs-lisp
  (use-package mic-paren
    :config
    (paren-activate))

#+END_SRC

** Load non-MELPA packages
 #+begin_src emacs-lisp
   ;;; Place to put local packages.
   (let* ((path (expand-file-name "lisp" user-emacs-directory))
          (local-pkgs (mapcar 'file-name-directory (directory-files-recursively path ".*\\.el"))))
     (if (file-accessible-directory-p path)
         (mapc (apply-partially 'add-to-list 'load-path) local-pkgs)
       (make-directory path :parents)))
 #+end_src

* Theme and Appearance
[[https://emacs.stackexchange.com/questions/7151/is-there-a-way-to-detect-that-emacs-is-running-in-a-terminal][Terminal sessions]] can have problems with color themes, so only load your custom color profile if running in a GUI. I do this by running emacs with two different aliases, one for a full GUI session and another for a terminal, with its own minimal init.el loaded. This is usually only for git commits and other quick edits.
** Visual Tweaks
 Disable the default splash screen, the visual scrollbars, the tool bar, and the menu bar that you never click.

#+BEGIN_SRC emacs-lisp
  (setq inhibit-splash-screen t)
  (scroll-bar-mode -1)
  (menu-bar-mode -1)
  (tool-bar-mode -1)
 #+END_SRC

*** Rainbow Mode
- Sunday 25 February 2024

This highlights hex numbers with the corresponding color, so you know what you're about to get. Useful when doing things like trying to figure out which keyword goes with which color in an rxvt config...

#+BEGIN_SRC emacs-lisp
    (use-package rainbow-mode
      :ensure t)
 #+END_SRC

** load a default theme.
[[https://emacsfodder.github.io/emacs-theme-editor/][Edit your own theme]], or find a [[https://peach-melpa.org/][premade theme]] you like online.

#+BEGIN_SRC emacs-lisp
  (add-to-list 'custom-theme-load-path "~/.emacs.d/themes/")
  (if (display-graphic-p)
      ;;(load-theme 'neptune t))
      (load-theme 'xemacs t))
#+END_SRC

** Display clock and system load average

#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

** Transparency
Set transparency, and map transparency toggle to C-c t from https://www.emacswiki.org/emacs/TransparentEmacs

#+BEGIN_SRC emacs-lisp
  (defun toggle-transparency ()
    (interactive)
    (let ((alpha (frame-parameter nil 'alpha)))
      (set-frame-parameter
       nil 'alpha
       (if (eql (cond ((numberp alpha) alpha)
                      ((numberp (cdr alpha)) (cdr alpha))
                      ;; Also handle undocumented (<active> <inactive>) form.
                      ((numberp (cadr alpha)) (cadr alpha)))
                100)
           '(95 . 50) '(100 . 100)))))
  (global-set-key (kbd "C-c t") 'toggle-transparency)
#+END_SRC

** Modeline - Spaceline

#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-spacemacs-theme)
    (spaceline-toggle-projectile-root-off))
#+END_SRC

** diminish - hide minor modes from line

#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :after spaceline
    :init
    (dolist (diminish-list '(page-break-lines-mode
			     undo-tree-mode
			     org-src-mode
			     eldoc-mode
			     visual-line-mode
			     org-indent-mode
			     ))
      (diminish diminish-list)))
#+END_SRC

* Searching
The three packages here are ~ivy~, ~counsel~, and ~swiper~. Together they give regular expression searches with spaces and suggest completions for commands and other minibuffer actions. ~Ivy-rich~ provides extra information on functions in ivy menus.
#+BEGIN_SRC emacs-lisp

  ;; ivy gives intelligent file search with M-x
  (use-package ivy
    :diminish
    :config
    (ivy-mode 1))

  (use-package ivy-rich
    :after ivy
    :init
    (ivy-rich-mode 1))

  ;; counsel is a requirement for swiper
  (use-package counsel)

  ;; swiper is an improved search with intelligent pattern matching.
  (use-package swiper
    :bind (("C-s" . swiper)
           ("C-r" . swiper)
           ("C-c C-r" . ivy-resume)
           ("M-x" . counsel-M-x)
           ("C-x C-f" . counsel-find-file)
           ("M-y" . counsel-yank-pop)
           ("M-n" . (lambda () (interactive) (search-forward (car swiper-history))))
           ("M-p" . (lambda () (interactive) (search-backward (car swiper-history)))))
    :config
    (progn
      (setq ivy-use-virtual-buffers t)
      (setq ivy-display-style 'fancy)
      (define-key read-expression-map (kbd "C-r") 'counsel-expression-history)))
#+END_SRC

* iBuffer
The size column is not human readable by default. [[https://www.emacswiki.org/emacs/IbufferMode#h5o-12:~:text=match%20qualifier%20it))))-,Use%20Human%20readable%20Size%20column,-I%20don%E2%80%99t%20like][Emacs Wiki has a solution to this.]]

#+BEGIN_SRC emacs-lisp
  (use-package ibuffer
    :ensure nil; ; ibuffer is built-in, so don't try to install it from melpa.
    :bind ("C-x C-b" . ibuffer)
    :hook (ibuffer-mode . (lambda ()
              (ibuffer-switch-to-saved-filter-groups "default")))
    :config
    ;; Don't show filter groups if there are no filters in the group
    (setq ibuffer-show-empty-filter-groups nil)
    ;; Don't ask for confirmation to delete unmodified buffers
    (setq ibuffer-expert t)
    ;; categorize buffers by project/language groups:
    (setq ibuffer-saved-filter-groups
          (quote (("default"
                   ("python" (mode . python-mode))
                   ("c/c++" (or
                             (mode . c-mode)
                             (mode . c++-mode)))
                   ("org" (mode . org-mode))
                   ("TeX" (or (filename . ".tex")
                              (filename . ".sty")))
                   ("docs" (mode . markdown-mode))
                   ("web" (or
                           (mode . mhtml-mode)
                           (mode . html-mode)
                           (mode . css-mode)))
                   ("emacs" (or
                             (name . "^\\*scratch\\*$")
                             (name . "^\\*Warnings\\*$")
                             (name . "^\\*Messages\\*$")))
                   ("Dired" (mode . dired-mode))
                   ))))

    (defun rac/--human-readable-file-sizes-to-bytes (string)
      "Convert a human-readable file size into bytes."
      (cond
       ((string-suffix-p "G" string t)
        (* 1000000000 (string-to-number (substring string 0 (- (length string) 1)))))
       ((string-suffix-p "M" string t)
        (* 1000000 (string-to-number (substring string 0 (- (length string) 1)))))
       ((string-suffix-p "K" string t)
        (* 1000 (string-to-number (substring string 0 (- (length string) 1)))))
       (t
        (string-to-number (substring string 0 (- (length string) 1))))))

    (defun rac/--bytes-to-human-readable-file-sizes (bytes)
      "Convert number of bytes to human-readable file size."
      (cond
       ((> bytes 1000000000) (format "%10.1fG" (/ bytes 1000000000.0)))
       ((> bytes 100000000) (format "%10.0fM" (/ bytes 1000000.0)))
       ((> bytes 1000000) (format "%10.1fM" (/ bytes 1000000.0)))
       ((> bytes 100000) (format "%10.0fk" (/ bytes 1000.0)))
       ((> bytes 1000) (format "%10.1fk" (/ bytes 1000.0)))
       (t (format "%10d" bytes))))

    ;; Use human readable Size column instead of original one
    (define-ibuffer-column size-h
      (:name "Size"
             :summarizer
             (lambda (column-strings)
               (let ((total 0))
                 (dolist (string column-strings)
                   (setq total
                         (+ (float (rac/--human-readable-file-sizes-to-bytes string))
                            total)))
                 (rac/--bytes-to-human-readable-file-sizes total)))); :summarizer nil
      (rac/--bytes-to-human-readable-file-sizes (buffer-size)))

    ;; Modify the default ibuffer-formats
    (setq ibuffer-formats
          '((mark modified read-only locked " "
                  (name 30 30 :left :elide)
                  " "
                  (size-h 11 -1 :right)
                  " "
                  (mode 16 16 :left :elide)
                  " "
                  filename-and-process)
            (mark " "
                  (name 33 33)
                  " " filename))))
#+END_SRC

* TODO Dashboard / Homescreen
- Added dashboard config to [[https://githubmemory.com/repo/emacs-dashboard/emacs-dashboard/issues/297][close agenda buffers]] after reading them on startup.

#+BEGIN_SRC emacs-lisp

      (use-package projectile
        :diminish projectile-mode
        :config (projectile-mode)
        :bind-keymap
        ("C-c p" . projectile-command-map)
        :custom ((projectile-completion-system 'ivy))
        :init
        (when (file-directory-p "~/repos/")
          (setq projectile-project-search-path '("~/repos/"))))

      (use-package all-the-icons)

      ;; install if not present
      (unless (file-exists-p "~/.local/share/fonts/all-the-icons.ttf")
        (all-the-icons-install-fonts))

      (use-package dashboard
        :init
        (message "Dashboard: Setting banner...")
        (setq dashboard-startup-banner "~/.emacs.d/banner/Aoba.png")
        (message "Dashboard: Setting projectile backend...")
        (setq dashboard-projects-backend 'projectile)

        (message "Dashboard: Setting items...")
        (setq dashboard-items '((projects . 10)
                                (recents . 15)
                                (bookmarks . 5)
                                (registers . 5)))

        (message "Dashboard: Setting display options...")
        (setq dashboard-center-content t)
        (setq dashboard-set-file-icons t)
        (setq dashboard-set-heading-icons t)
        (setq dashboard-footer-messages '(""))
        (setq dashboard-banner-logo-title (rac/random-quote))
        (message "Dashboard: Calling dashboard-setup-startup-hook...")
        (dashboard-setup-startup-hook))
      #+END_SRC

* Org Mode
** Org Base Config
#+BEGIN_SRC emacs-lisp
  ;; Org-mode ------------------------------------------------------------
  (defun org-mode-setup ()
    (org-indent-mode)
    (dolist (face '((org-level-1 . 1.3)
                    (org-level-2 . 1.2)
                    (org-level-3 . 1.1)
                    (org-level-4 . 1.0)
                    (org-level-5 . 1.1)
                    (org-level-6 . 1.1)
                    (org-level-7 . 1.1)
                    (org-level-8 . 1.1)))
      (set-face-attribute (car face) nil :font "Cantarell" :weight 'regular :height (cdr face)))
    (set-face-attribute 'org-block nil :foreground nil :inherit 'fixed-pitch)
    (set-face-attribute 'org-code nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-table nil   :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-verbatim nil :inherit '(shadow fixed-pitch))
    (set-face-attribute 'org-special-keyword nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-meta-line nil :inherit '(font-lock-comment-face fixed-pitch))
    (set-face-attribute 'org-checkbox nil :inherit 'fixed-pitch))

  ;;(org-mode-setup)
  (defun org-winmove-setup()
    (setq-local windmove-mode nil)
    (add-hook 'org-shiftup-final-hook 'windmove-up)
    (add-hook 'org-shiftleft-final-hook 'windmove-left)
    (add-hook 'org-shiftdown-final-hook 'windmove-down)
    (add-hook 'org-shiftright-final-hook 'windmove-right))

  (defun org-note-insert-page ()
    "Prompt user to enter a number, with input history support."
    (interactive)
    (let (n)
      (setq n (read-number "Enter a page number: " ))
      (end-of-line)
      (insert "\n- ")
      (insert (format "(%d) " n))))

  (use-package org
    :hook
    ((org-mode . org-mode-setup)
     (org-mode . org-winmove-setup))
    :config
    (setq org-ellipsis " ▾") ;; get rid of ugly orange underlining
    (require 'ox-md)   ;; Add markdown export support
    :bind
    ("C-p"   . org-note-insert-page))

  (use-package org-bullets
    :hook (org-mode . org-bullets-mode)
    :custom
    (org-bullets-bullet-list '("あ" "い" "う" "え" "お")))
  (setq org-log-done 'time)

  ;; reveal.js presentations
  (use-package ox-reveal
    :config
    ;; We need to tell ox-reveal where to find the js file
    (setq org-reveal-root "http://cdn.jsdelivr.net/npm/reveal.js")
    (setq org-reveal-mathjax t))

#+END_SRC
** Org Links Mode

#+BEGIN_SRC emacs-lisp
    (global-set-key (kbd "C-c c")
                    'org-capture)

  (advice-add 'org-capture-finalize :after #'delete-capture-frame)
  (advice-add 'org-capture-destroy :after #'delete-capture-frame)

    (defun make-capture-frame ()
      "Create a new frame and run org-capture."
      (interactive)
      (make-frame '((name . "capture")))
      (select-frame-by-name "capture")
      (delete-other-windows)
      (cl-letf (((symbol-function 'switch-to-other-buffer-window) #'switch-to-buffer))
        (org-capture)))
#+END_SRC

** Org babel load languages

#+BEGIN_SRC emacs-lisp
  (with-eval-after-load 'org
    (org-babel-do-load-languages
     'org-babel-load-languages
     '((emacs-lisp . t)
       (python . t)))
    (setq org-confirm-babel-evaluate nil))
#+END_SRC

** Org Capture Templates

Do not be confused between the quote and the [[https://www.gnu.org/software/emacs/manual/html_node/elisp/Backquote.html][backquote]]. The quote "'( )" returns a list, but does not let you evaluate within it. A backquote will allow items within the list to be evaluated, by prefacing them with a comma operator ",". The comma will evaluate the following list or element, and expand it in the list. I use this below to keep myself from retyping the complicated `link-capture-string` five times (following the "Do Not Repeat Yourself" principle.)

#+BEGIN_SRC emacs-lisp

  (setq link-capture-string "| [[%^{LINK}][%^{TITLE}]] | %^{NOTES} | %^g | %t |")
  (setq quote-capture-string "# %T\n#+BEGIN_QUOTE\n/%^{QUOTE}/\n\t--%^{SOURCE}\n#+END_QUOTE\n\n%?")

  (setq org-capture-templates
        `(
          ("1" "Links : Geofront" table-line (file+headline
                                              "~/Dropbox/website/org/capture/links-general.org" "Links")
           ,link-capture-string :kill-buffer t)
          ("2" "Links : NERV Headquarters" table-line (file+headline
                                                       "~/Dropbox/website/org/capture/links-focused.org" "Other")
           ,link-capture-string :kill-buffer t)
          ("3" "Links : Central Dogma" table-line (file+headline                                       "~/Dropbox/website/org/capture/links-private.org" "Links")
           ,link-capture-string :kill-buffer t)
          ("n" "Links : Nabokov" table-line (file+headline
                                             "~/Dropbox/website/org/capture/links-general.org" "Nabokovia")
           ,link-capture-string :kill-buffer t)
          ("q" "new quote" plain (file+headline "~/Dropbox/website/org/geocite/other/other-content-index.org" "Quotes")
           :prepend t :kill-buffer t)
          ("g" "Links : Games [Geofront]" table-line (file+headline
                                                      "~/Dropbox/website/org/capture/links-general.org" "Game")
           ,link-capture-string :kill-buffer t)
          ))
#+END_SRC
** Auto tangle Org config file

#+begin_src emacs-lisp
  (defun rac/org-babel-tangle-config ()
    (when (string-equal (buffer-file-name)
                        (expand-file-name "~/repos/rac_dotfiles/.emacs.d/racinit.org"))
      (let ((org-confirm-babel-evaluate nil))
        (org-babel-tangle))))

  (add-hook 'after-save-hook #'rac/org-babel-tangle-config)
#+end_src

** Visual Fill Org Hook

#+BEGIN_SRC emacs-lisp
  (defun rac/org-mode-visual-fill ()
    (setq visual-fill-column-width 150
          visual-fill-column-center-text t)
    (visual-fill-column-mode 1))

  (use-package visual-fill-column
    :defer t
    :hook (org-mode . rac/org-mode-visual-fill)
    :diminish)
#+END_SRC

** Org Roam

#+BEGIN_SRC emacs-lisp
  (use-package org-roam
    :ensure t
    :custom
    (org-roam-directory "~/Dropbox/emacs/Roam/db")
    (org-roam-completion-everywhere t)
    (org-roam-capture-templates
     '(("n" "note: default" plain
        "%?"
        :if-new (file+head "%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("a" "author" plain
        "* Bio\n\n- year: %?\n- Birthplace: %?\n- Other: %?\n\n"
        :if-new (file+head "%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)
       ("b" "book" plain
        (file "~/Dropbox/emacs/Roam/templates/book_template.org")
        :if-new (file+head "%<%Y%m%d>-${slug}.org" "#+title: ${title}\n")
        :unnarrowed t)))
    :bind (("C-c n l" . org-roam-buffer-toggle)
  	 ("C-c n f" . org-roam-node-find)
  	 ("C-c n i" . org-roam-node-insert)
  	 ("C-c n I" . org-roam-node-insert-immediate)
  	 ("C-c n c" . org-id-get-create)
  	 :map org-mode-map
  	 ("C-M-i" . completion-at-point))
    :config
    (org-roam-setup)
  					; The following snippet allows searching for tags using `org-roam-node-find`.
  					;  [[https://github.com/org-roam/org-roam/pull/2054]]
    (setq org-roam-node-display-template
  	(concat "${title:*} "
  		(propertize "${tags:10}" 'face 'org-tag)))
    )
                 #+END_SRC

*** Org-Roam-Ui
#+BEGIN_SRC emacs-lisp
  (use-package org-roam-ui
    :ensure t)
#+END_SRC
** Reference and Citations

*** Bibtex

#+BEGIN_SRC emacs-lisp
  (use-package bibtex
    :ensure async)
  (setq bibtex-autokey-year-length 4
        bibtex-autokey-name-year-separator "-"
        bibtex-autokey-year-title-separator "-"
        bibtex-autokey-titleword-separator "-"
        bibtex-autokey-titlewords 2
        bibtex-autokey-titlewords-stretch 1
        bibtex-autokey-titleword-length 5)
#+END_SRC

** Latex with Org Export
[[https://emacs.stackexchange.com/questions/54703/exporting-latex-commands-to-html-mathjax][Exporting LaTeX newcommands to MathJax in Org mode]]

This must be loaded after `org`!!!

#+BEGIN_SRC emacs-lisp
  ;; (with-eval-after-load "org"
  ;; (add-to-list 'org-src-lang-modes '("latex-macros" . latex)))

  (defvar org-babel-default-header-args:latex-macros
    '((:results . "raw")
      (:exports . "results")))

  (defun prefix-all-lines (pre body)
    (with-temp-buffer
      (insert body)
      (string-insert-rectangle (point-min) (point-max) pre)
      (buffer-string)))

  (defun org-babel-execute:latex-macros (body _params)
    (concat
     (prefix-all-lines "#+LATEX_HEADER: " body)
     "\n#+HTML_HEAD_EXTRA: <div style=\"display: none\"> \\(\n"
     (prefix-all-lines "#+HTML_HEAD_EXTRA: " body)
     "\n#+HTML_HEAD_EXTRA: \\)</div>\n"))
   #+END_SRC

* LaTeX
** TODO Auctex / latexmk

#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :mode (("\\.tex\\'" . latex-mode)
           ("\\.sty\\'" . latex-mode))
    :bind ("C-<return>" . compile)
    :config
    (setq TeX-electric-sub-and-superscript t)
    )
#+END_SRC

- Wednesday 21 February 2024
There are some detailed examples on LaTeX environments [[https://emacs.stackexchange.com/questions/34189/emacs-setup-for-latex-after-use-package-verse][here]]. My hooks weren't working because I was in tex mode, not latex mode.

* TODO LSP and IDE Core
** Autocompletion
** Flycheck

#+BEGIN_SRC emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.h\\'" . c++-mode))

    (use-package flycheck
      :ensure t
      :config
      (add-hook 'after-init-hook #'global-flycheck-mode)
      ;; Set the gcc language standard.
      (add-hook 'c++-mode-hook '(lambda () (setq flycheck-gcc-language-standard "c++23")))
      ;; Tell cppcheck to use c++23.
      (setq flycheck-cppcheck-standards '("c++23"))
      (add-hook 'c++-mode-hook
              '(lambda ()
                 (setq flycheck-gcc-args '("-std=c++23"))))
      )
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (use-package company
    :hook
    ((emacs-lisp-mode
      c++-mode
      c-mode
      lsp-mode
      python-mode)
     . company-mode)
    :bind (:map company-active-map
                ("<tab>" . company-complete-selection))
    :custom
    (company-minimum-prefix-length 1)
    (company-idle-delay 0.0)
    :custom-face
    (company-tooltip
     ((t (:family "Terminus")))))
#+END_SRC
** Language Server Protocol
This will take some fiddling. See [[https://emacs-lsp.github.io/lsp-mode/tutorials/how-to-turn-off/][this page]] for a list of the options that can be enabled/disabled in lsp-mode.

#+BEGIN_SRC emacs-lisp
    (use-package lsp-mode
    :commands (lsp lsp-deferred)
    :init (setq lsp-keymap-prefix "C-c l")
    :config
    (setq lsp-clients-clangd-executable "/usr/bin/clangd"
          lsp-headerline-breadcrumb-enable nil
          lsp-enable-which-key-integration t
          lsp-signature-auto-activate nil
          lsp-diagnostics-provider :flycheck
    ))

  (use-package lsp-ui
    :commands lsp-ui-mode
    :after lsp-mode
    :config
    (setq lsp-ui-doc-enable t
          lsp-ui-doc-position 'at-point ; 'bottom
          lsp-ui-doc-use-childframe t))

  (defun rac/toggle-lsp ()
  "Toggle LSP in the current project/buffer."
  (interactive)
  (if (bound-and-true-p lsp-mode)
      (progn (lsp-workspace-shutdown (lsp-session))
             (lsp-disconnected-maybe)
             (message "LSP stopped for %s" (buffer-name)))
    (let ((project-root (or (projectile-project-root) default-directory)))
      (lsp-deferred)
      (message "LSP started for project at %s" project-root))))

  (global-set-key (kbd "C-c L") 'rac/toggle-lsp)
#+END_SRC

* Auto Linting
** Python
Automatically run `blacken` on any Python buffer upon saving. The time saved is worth any disagreements I might have about formatting.

#+BEGIN_SRC emacs-lisp
  (use-package blacken
    :hook (python-mode . blacken-mode))
#+END_SRC

** DONE C/C++
CLOSED: [2025-09-09 Tue 22:55]

Using `((c-mode c++-mode) . format-all-mode)` successfully activated the minor mode but would not select the formatter, despite being installed. I fixed this by using `format-all-ensure-formatter`, which must activate the minor mode. It seems to work now.

Remember that `clang-format` needs to be installed.

#+BEGIN_SRC emacs-lisp
  (use-package format-all
    :ensure t
    :hook ((c-mode . format-all-mode)
           (c++-mode . format-all-mode))
    :config
    (setq-default format-all-formatters '(("C++" clang-format))))
#+END_SRC
** TODO Emacs-Lisp
Find a way to auto-lint Emacs-Lisp code blocks in Org files. The rules should be something like [[https://github.com/bbatsov/emacs-lisp-style-guide][the ones here.]]
* Python
** Selective Display
Uses the function keys to hide indentation.

#+BEGIN_SRC emacs-lisp
  (defun rac/indent-show-all ()
    (interactive)
    (set-selective-display nil)
    (condition-case nil (hs-show-all) (error nil))
    (show-all))

  (defun rac/python-remap-fs ()
    (define-key python-mode-map [f1] 'rac/indent-show-all)
    (define-key python-mode-map [f2] (lambda () (interactive) (set-selective-display
                                                   standard-indent)))
    (define-key python-mode-map [f3] (lambda () (interactive) (set-selective-display
                                                   (* 2 standard-indent))))
    (define-key python-mode-map [f4] (lambda () (interactive) (set-selective-display
                                                   (* 3 standard-indent))))
    (define-key python-mode-map [f5] (lambda () (interactive) (set-selective-display
                                                   (* 4 standard-indent))))
    (define-key python-mode-map [f6] (lambda () (interactive) (set-selective-display
                                                   (* 5 standard-indent))))
    (define-key python-mode-map [f7] (lambda () (interactive) (set-selective-display
                                                   nil))))
  (add-hook 'python-mode-hook 'rac/python-remap-fs)
#+END_SRC

See here for the [[https://stackoverflow.com/questions/23654334/python-in-emacs-name-main-but-somehow-not][difference between]] sending the current Python buffer to an inferior shell (`C-c C-c`) and the universal command that also sends `__main__` for properly written scripts (`C-u C-c C-c`)
** Python Base

#+BEGIN_SRC emacs-lisp
      (use-package python
        :ensure t
        :custom
        (python-shell-interpreter "python3"))

      (use-package conda
        :after python
        :config
        (custom-set-variables
         '(conda-anaconda-home "~/.conda/"))
        (setq conda-env-home-directory (expand-file-name "~/miniconda3/"))
        (conda-env-activate "~/miniconda3/"))
#+END_SRC

** Yasnippet
Check out this good [[http://www.howardism.org/Technical/Emacs/templates-tutorial.html][tutorial]] on Yasnippet features and functions.

#+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :ensure t
    :mode ("README\\.md\\'" . gfm-mode)
    :init (setq markdown-command "multimarkdown")
    )

  (use-package yasnippet
    :ensure t
    :config
    (add-to-list 'yas-snippet-dirs (locate-user-emacs-file "snippets"))
    (yas-reload-all)
    (yas-global-mode 1)
    :hook
    (markdown-mode . (lambda ()
                       (yas-activate-extra-mode 'latex-mode)))
    :bind
    ("C-<tab>" . yas-expand)
    )

#+END_SRC

* C / C++
** Set compile hook to C/++
#+BEGIN_SRC emacs-lisp
  (add-hook 'c-mode-common-hook
            (lambda ()
              (local-set-key (kbd "C-<return>") 'compile)))
#+END_SRC
* SSH / TRAMP
[[https://www.gnu.org/software/emacs/manual/html_node/tramp/Traces-and-Profiles.html][GNU.org]] lists the Tramp verbosity levels, from 0 (doesn't talk to you at all) to 10 (doesn't shut up). 3 is the default. For your sanity (I'm speaking from experience), do _not_ set this to 10 for any stupid reason.
** Tramp

#+BEGIN_SRC emacs-lisp
  (setq tramp-verbose 3)
#+END_SRC

* Version Control
This is for playing around only. In practice, I have found that doing this from the terminal is easier.

#+BEGIN_SRC emacs-lisp
    (use-package magit
      :commands (magit-status magit-get-current-branch)
      :bind ("C-c g" . magit-status))
#+END_SRC

* Website
** Main Website Export
Deploy with `C-c + b`.

The current way I deal with this is to keep the site elisp in a separate file, which might be packaged with the site repo as a root level configuration file. I then build the site [[https://stackoverflow.com/questions/46295511/how-to-run-org-mode-commands-from-shell][from the command line]], with a `make` recipe. Since I only have one website, I don't have this in stencil form, but it could be made quickly from my Geocities page.

At any rate, load `websites.el'.

#+BEGIN_SRC emacs-lisp
  (rac/load-if-exists "~/.emacs.d/websites.el")
#+END_SRC
** Rebuild Sites
 #+BEGIN_SRC emacs-lisp
   (global-set-key (kbd "C-c b") 'org-publish-project)
 #+END_SRC

** Other Tools
For exporting an emacs buffer as an html file.

#+BEGIN_SRC emacs-lisp
  (use-package htmlize
    :defer 0)
#+END_SRC

* End Of Startup Actions
Lower the garbage collection threshold from the higher value used at startup.

#+BEGIN_SRC emacs-lisp
  (setq gc-cons-threshold (* 50 rac/bytes-per-MiB))
    ;"GC threshold during runtime: 50 MiB."
#+END_SRC


- Wednesday 06 March 2024
[[https://www.gnu.org/software/emacs/manual/html_node/emacs/Saving-Emacs-Sessions.html][Emacs desktop sessions]]

#+BEGIN_SRC emacs-lisp
  (desktop-save-mode t)
#+END_SRC

* Test Space
For settings and Melpa packages I haven't committed myself to.
* Dump
** RSS - Elfeed
I keep my elfeed-org file in [[~/Dropbox/emacs/elfeed.org][Dropbox]] to allow syncing between computers.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package elfeed
    :ensure t
    :commands (elfeed)
    :bind ("C-x w" . elfeed)
    :config
    (setq-default elfeed-search-filter "@6-months-ago +unread"))
#+END_SRC

** TODO Directory Management
All I really want is for directory buffers not to accumulate.

#+BEGIN_SRC emacs-lisp :tangle no
  (use-package dired
    :ensure nil
    :commands (dired dired-jump)
    :custom ((dired-listing-switches "-hago --group-directories-first")
             (setq delete-by-moving-to-trash t)))
  (use-package all-the-icons-dired
    :hook (dired-mode . all-the-icons-dired-mode))
#+END_SRC
